local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Цвета как в Fatality
local Colors = {
    Black = Color3.fromRGB(16, 16, 16),
    Main = Color3.fromRGB(255, 106, 133),
    Background = Color3.fromRGB(19, 19, 19),
    Secondary = Color3.fromRGB(24, 24, 24),
    Border = Color3.fromRGB(29, 29, 29),
    Text = Color3.fromRGB(255, 255, 255),
    Risky = Color3.fromRGB(255, 160, 92)
}

-- Шрифт как в Fatality
local FontSemiBold = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)

-- Функция для создания анимаций
local function CreateAnimation(Instance, Time, Style, Property)
    if typeof(Style) == 'table' then
        Property = Style
        Style = nil
    end
    
    local Tween = TweenService:Create(Instance, TweenInfo.new(Time or 1, Style or Enum.EasingStyle.Quint), Property)
    Tween:Play()
    return Tween
end

-- Функция для создания Toggle (точная копия из Fatality)
local function CreateToggle(Parent, Config)
    Config = Config or {}
    Config.Name = Config.Name or "Toggle"
    Config.Default = Config.Default or false
    Config.Risky = Config.Risky or false
    Config.Callback = Config.Callback or function(bool) end

    local Toggle = Instance.new("Frame")
    local Toggle_Name = Instance.new("TextLabel")
    local ValueFrame = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local ValueIcon = Instance.new("ImageLabel")

    Toggle.Name = "Toggle"
    Toggle.Parent = Parent
    Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Toggle.BackgroundTransparency = 1.000
    Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Toggle.BorderSizePixel = 0
    Toggle.Size = UDim2.new(1, -25, 0, 17)
    Toggle.ZIndex = 2

    Toggle_Name.Name = "Toggle_Name"
    Toggle_Name.Parent = Toggle
    Toggle_Name.AnchorPoint = Vector2.new(0, 0.5)
    Toggle_Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Toggle_Name.BackgroundTransparency = 1.000
    Toggle_Name.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Toggle_Name.BorderSizePixel = 0
    Toggle_Name.Position = UDim2.new(0, 0, 0.5, 0)
    Toggle_Name.Size = UDim2.new(1, 0, 0.800000012, 0)
    Toggle_Name.ZIndex = 3
    Toggle_Name.FontFace = FontSemiBold
    Toggle_Name.Text = Config.Name
    Toggle_Name.TextColor3 = (Config.Risky and Colors.Risky) or Colors.Text
    Toggle_Name.TextSize = 13.000
    Toggle_Name.TextTransparency = 0.200
    Toggle_Name.TextXAlignment = Enum.TextXAlignment.Left

    ValueFrame.Name = "ValueFrame"
    ValueFrame.Parent = Toggle
    ValueFrame.AnchorPoint = Vector2.new(1, 0.5)
    ValueFrame.BackgroundColor3 = Colors.Black
    ValueFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ValueFrame.BorderSizePixel = 0
    ValueFrame.Position = UDim2.new(1, -3, 0.5, 0)
    ValueFrame.Size = UDim2.new(0.899999976, 0, 0.899999976, 0)
    ValueFrame.SizeConstraint = Enum.SizeConstraint.RelativeYY
    ValueFrame.ZIndex = 3

    UICorner.CornerRadius = UDim.new(0, 2)
    UICorner.Parent = ValueFrame

    ValueIcon.Name = "ValueIcon"
    ValueIcon.Parent = ValueFrame
    ValueIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    ValueIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValueIcon.BackgroundTransparency = 1.000
    ValueIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ValueIcon.BorderSizePixel = 0
    ValueIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    ValueIcon.Size = UDim2.new(0.699999988, 0, 0.699999988, 0)
    ValueIcon.ZIndex = 3
    ValueIcon.Image = "rbxassetid://10709790644" -- Check icon

    local function toggleImg(value)
        if value then
            CreateAnimation(ValueIcon, 0.45, {
                ImageTransparency = 0,
                ImageColor3 = Colors.Main,
                Size = UDim2.new(0.8, 0, 0.8, 0),
                Rotation = 0,
            })
        else
            CreateAnimation(ValueIcon, 0.45, {
                ImageTransparency = 1,
                ImageColor3 = Colors.Text,
                Size = UDim2.new(0.699999988, 0, 0.699999988, 0),
                Rotation = 15
            })
        end
    end

    -- Инициализация состояния
    toggleImg(Config.Default)

    -- Эффекты при наведении
    ValueFrame.MouseEnter:Connect(function()
        if not Config.Default then
            CreateAnimation(ValueIcon, 0.45, {
                ImageTransparency = 0.5,
                ImageColor3 = Colors.Text,
                Size = UDim2.new(0.7, 0, 0.7, 0),
                Rotation = 0
            })
        end
    end)

    ValueFrame.MouseLeave:Connect(function()
        if not Config.Default then
            CreateAnimation(ValueIcon, 0.45, {
                ImageTransparency = 1,
                ImageColor3 = Colors.Text,
                Size = UDim2.new(0.699999988, 0, 0.699999988, 0),
                Rotation = 15
            })
        end
    end)

    -- Обработчик клика
    local Button = Instance.new("TextButton")
    Button.Name = "InputButton"
    Button.Parent = ValueFrame
    Button.BackgroundTransparency = 1
    Button.TextTransparency = 1
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.ZIndex = 4

    Button.MouseButton1Click:Connect(function()
        Config.Default = not Config.Default
        toggleImg(Config.Default)
        Config.Callback(Config.Default)
    end)

    return {
        SetValue = function(value)
            local IsSame = value == Config.Default
            Config.Default = value
            toggleImg(Config.Default)
            if not IsSame then
                Config.Callback(Config.Default)
            end
        end,
        GetValue = function()
            return Config.Default
        end
    }
end

-- Функция для создания Slider (точная копия из Fatality)
local function CreateSlider(Parent, Config)
    Config = Config or {}
    Config.Name = Config.Name or "Slider"
    Config.Type = Config.Type or ""
    Config.Default = Config.Default or 50
    Config.Min = Config.Min or 0
    Config.Max = Config.Max or 100
    Config.Round = Config.Round or 0
    Config.Risky = Config.Risky or false
    Config.Callback = Config.Callback or function(number) end

    local Slider = Instance.new("Frame")
    local Slider_Name = Instance.new("TextLabel")
    local ValueFrame = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local boxli = Instance.new("Frame")
    local UICorner_2 = Instance.new("UICorner")
    local ValueText = Instance.new("TextLabel")

    Slider.Name = "Slider"
    Slider.Parent = Parent
    Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Slider.BackgroundTransparency = 1.000
    Slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Slider.BorderSizePixel = 0
    Slider.Size = UDim2.new(1, -25, 0, 17)
    Slider.ZIndex = 2

    Slider_Name.Name = "Slider_Name"
    Slider_Name.Parent = Slider
    Slider_Name.AnchorPoint = Vector2.new(0, 0.5)
    Slider_Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Slider_Name.BackgroundTransparency = 1.000
    Slider_Name.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Slider_Name.BorderSizePixel = 0
    Slider_Name.Position = UDim2.new(0, 0, 0.5, 0)
    Slider_Name.Size = UDim2.new(1, 0, 0.800000012, 0)
    Slider_Name.ZIndex = 3
    Slider_Name.FontFace = FontSemiBold
    Slider_Name.Text = Config.Name
    Slider_Name.TextColor3 = (Config.Risky and Colors.Risky) or Colors.Text
    Slider_Name.TextSize = 13.000
    Slider_Name.TextTransparency = 0.200
    Slider_Name.TextXAlignment = Enum.TextXAlignment.Left

    ValueFrame.Name = "ValueFrame"
    ValueFrame.Parent = Slider
    ValueFrame.AnchorPoint = Vector2.new(1, 0.5)
    ValueFrame.BackgroundColor3 = Colors.Black
    ValueFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ValueFrame.BorderSizePixel = 0
    ValueFrame.Position = UDim2.new(1, -3, 0.5, 0)
    ValueFrame.Size = UDim2.new(0, 85, 0.600000024, 0)
    ValueFrame.ZIndex = 3

    UICorner.CornerRadius = UDim.new(0, 2)
    UICorner.Parent = ValueFrame

    boxli.Name = "boxli"
    boxli.Parent = ValueFrame
    boxli.BackgroundColor3 = Colors.Main
    boxli.BorderColor3 = Color3.fromRGB(0, 0, 0)
    boxli.BorderSizePixel = 0
    boxli.Size = UDim2.new((Config.Default - Config.Min) / (Config.Max - Config.Min), 0, 1, 0)
    boxli.ZIndex = 4

    UICorner_2.CornerRadius = UDim.new(0, 2)
    UICorner_2.Parent = boxli

    ValueText.Name = "ValueText"
    ValueText.Parent = ValueFrame
    ValueText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValueText.BackgroundTransparency = 1.000
    ValueText.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ValueText.BorderSizePixel = 0
    ValueText.Size = UDim2.new(1, 0, 1, 0)
    ValueText.ZIndex = 5
    ValueText.FontFace = FontSemiBold
    ValueText.Text = string.format('%s%s', tostring(Config.Default), tostring(Config.Type))
    ValueText.TextColor3 = Colors.Text
    ValueText.TextSize = 9.000
    ValueText.TextStrokeTransparency = 0.850

    local IsHold = false

    local function update(Input)
        local SizeScale = math.clamp((Input.Position.X - ValueFrame.AbsolutePosition.X) / ValueFrame.AbsoluteSize.X, 0, 1)
        local Main = ((Config.Max - Config.Min) * SizeScale) + Config.Min
        local Value = math.floor(Main * (10 ^ Config.Round)) / (10 ^ Config.Round)
        local normalized = (Value - Config.Min) / (Config.Max - Config.Min)

        CreateAnimation(boxli, 0.2, {
            Size = UDim2.new(normalized, 0, 1, 0)
        })

        Config.Default = Value
        ValueText.Text = string.format('%s%s', tostring(Config.Default), tostring(Config.Type))
        Config.Callback(Value)
    end

    -- Обработчики ввода
    ValueFrame.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            IsHold = true
            update(Input)
        end
    end)

    ValueFrame.InputEnded:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            IsHold = false
        end
    end)

    UserInputService.InputChanged:Connect(function(Input)
        if IsHold and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
            update(Input)
        end
    end)

    return {
        SetValue = function(value)
            local IsSame = value == Config.Default
            Config.Default = math.clamp(value, Config.Min, Config.Max)
            
            CreateAnimation(boxli, 0.2, {
                Size = UDim2.new((Config.Default - Config.Min) / (Config.Max - Config.Min), 0, 1, 0)
            })

            ValueText.Text = string.format('%s%s', tostring(Config.Default), tostring(Config.Type))

            if not IsSame then
                Config.Callback(Config.Default)
            end
        end,
        GetValue = function()
            return Config.Default
        end
    }
end

-- Пример использования
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "FatalityElements"

local Container = Instance.new("Frame")
Container.Parent = ScreenGui
Container.Size = UDim2.new(0, 300, 0, 200)
Container.Position = UDim2.new(0.5, -150, 0.5, -100)
Container.BackgroundColor3 = Colors.Background
Container.BorderSizePixel = 0

local Layout = Instance.new("UIListLayout")
Layout.Parent = Container
Layout.Padding = UDim.new(0, 10)

-- Создание Toggle
local myToggle = CreateToggle(Container, {
    Name = "Включить функцию",
    Default = false,
    Risky = false,
    Callback = function(state)
        print("Toggle:", state)
    end
})

-- Создание Slider
local mySlider = CreateSlider(Container, {
    Name = "Скорость",
    Default = 50,
    Min = 0,
    Max = 100,
    Round = 0,
    Type = "%",
    Risky = false,
    Callback = function(value)
        print("Slider:", value)
    end
})

-- Демонстрация управления элементами
task.wait(3)
myToggle:SetValue(true)
mySlider:SetValue(75)
