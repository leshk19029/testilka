local Library = {}

-- Цвета библиотеки
Library.Colors = {
    Background = Color3.fromRGB(25, 25, 35),
    Header = Color3.fromRGB(35, 35, 45),
    TabButton = Color3.fromRGB(40, 40, 50),
    TabButtonSelected = Color3.fromRGB(50, 120, 255),
    ElementBackground = Color3.fromRGB(35, 35, 45),
    Text = Color3.fromRGB(240, 240, 240),
    Highlight = Color3.fromRGB(60, 140, 255),
    ToggleOff = Color3.fromRGB(80, 80, 90),
    ToggleOn = Color3.fromRGB(60, 180, 85),
    SliderTrack = Color3.fromRGB(60, 60, 70),
    SliderFill = Color3.fromRGB(50, 120, 255),
    Button = Color3.fromRGB(50, 120, 255),
    ButtonHover = Color3.fromRGB(70, 140, 255)
}

-- Вспомогательные функции
function Library:CreateElement(className, properties)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

function Library:RoundCorners(element, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 5)
    corner.Parent = element
    return corner
end

function Library:AddStroke(element, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Color3.fromRGB(50, 50, 60)
    stroke.Thickness = thickness or 1
    stroke.Parent = element
    return stroke
end

-- Основная функция создания библиотеки
function Library:Create(options)
    options = options or {}
    local lib = {}
    lib.Visible = false
    
    -- Создание основного интерфейса
    local ScreenGui = self:CreateElement("ScreenGui", {
        Name = "LibraryUI",
        DisplayOrder = 999,
        ResetOnSpawn = false
    })
    
    -- Фон
    local Background = self:CreateElement("Frame", {
        Name = "Background",
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        BackgroundColor3 = self.Colors.Background,
        Visible = false
    })
    self:RoundCorners(Background, 8)
    self:AddStroke(Background)
    Background.Parent = ScreenGui
    
    -- Шапка с названием
    local Header = self:CreateElement("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = self.Colors.Header
    })
    self:RoundCorners(Header, 8)
    Header.Parent = Background
    
    local Title = self:CreateElement("TextLabel", {
        Name = "Title",
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = options.Name or "LIBRARY",
        TextColor3 = self.Colors.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    Title.Parent = Header
    
    -- Контейнер для вкладок
    local TabContainer = self:CreateElement("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 120, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundTransparency = 1
    })
    TabContainer.Parent = Background
    
    -- Контейнер для контента
    local ContentContainer = self:CreateElement("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -120, 1, -40),
        Position = UDim2.new(0, 120, 0, 40),
        BackgroundTransparency = 1,
        ClipsDescendants = true
    })
    ContentContainer.Parent = Background
    
    local ContentScrolling = self:CreateElement("ScrollingFrame", {
        Name = "ContentScrolling",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })
    ContentScrolling.Parent = ContentContainer
    
    local ContentLayout = self:CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    ContentLayout.Parent = ContentScrolling
    
    -- Табы и контент
    lib.Tabs = {}
    lib.CurrentTab = nil
    
    -- Функция создания вкладки
    function lib:CreateTab(name)
        local tab = {}
        
        -- Кнопка вкладки
        local TabButton = Library:CreateElement("TextButton", {
            Name = name .. "TabButton",
            Size = UDim2.new(1, -10, 0, 35),
            Position = UDim2.new(0, 5, 0, #lib.Tabs * 40 + 5),
            BackgroundColor3 = Library.Colors.TabButton,
            Text = "",
            AutoButtonColor = false
        })
        Library:RoundCorners(TabButton, 5)
        TabButton.Parent = TabContainer
        
        local TabButtonText = Library:CreateElement("TextLabel", {
            Name = "Text",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = name,
            TextColor3 = Library.Colors.Text,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        TabButtonText.Parent = TabButton
        TabButtonText.Position = UDim2.new(0, 15, 0, 0)
        
        -- Контент вкладки
        local TabContent = Library:CreateElement("ScrollingFrame", {
            Name = name .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            ScrollBarThickness = 4,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        TabContent.Parent = ContentScrolling
        
        local TabLayout = Library:CreateElement("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        TabLayout.Parent = TabContent
        
        -- Функция переключения вкладки
        TabButton.MouseButton1Click:Connect(function()
            lib:SwitchTab(tab)
        end)
        
        -- Функции для элементов
        function tab:AddToggle(options)
            options = options or {}
            local toggle = {}
            
            local ToggleFrame = Library:CreateElement("Frame", {
                Name = "ToggleFrame",
                Size = UDim2.new(1, -20, 0, 30),
                BackgroundColor3 = Library.Colors.ElementBackground,
                LayoutOrder = #TabContent:GetChildren() * 2
            })
            Library:RoundCorners(ToggleFrame, 5)
            Library:AddStroke(ToggleFrame)
            ToggleFrame.Parent = TabContent
            
            local ToggleText = Library:CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = options.Name or "Toggle",
                TextColor3 = Library.Colors.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            ToggleText.Position = UDim2.new(0, 10, 0, 0)
            ToggleText.Parent = ToggleFrame
            
            local ToggleSwitch = Library:CreateElement("Frame", {
                Name = "Switch",
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(1, -50, 0.5, -10),
                BackgroundColor3 = options.Default and Library.Colors.ToggleOn or Library.Colors.ToggleOff
            })
            Library:RoundCorners(ToggleSwitch, 10)
            ToggleSwitch.Parent = ToggleFrame
            
            local ToggleDot = Library:CreateElement("Frame", {
                Name = "Dot",
                Size = UDim2.new(0, 16, 0, 16),
                Position = options.Default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                BackgroundColor3 = Library.Colors.Text
            })
            Library:RoundCorners(ToggleDot, 8)
            ToggleDot.Parent = ToggleSwitch
            
            toggle.Value = options.Default or false
            
            local function updateToggle()
                toggle.Value = not toggle.Value
                local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                
                local tween1 = game:GetService("TweenService"):Create(
                    ToggleDot,
                    tweenInfo,
                    {Position = toggle.Value and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)}
                )
                
                local tween2 = game:GetService("TweenService"):Create(
                    ToggleSwitch,
                    tweenInfo,
                    {BackgroundColor3 = toggle.Value and Library.Colors.ToggleOn or Library.Colors.ToggleOff}
                )
                
                tween1:Play()
                tween2:Play()
                
                if options.Callback then
                    options.Callback(toggle.Value)
                end
            end
            
            ToggleFrame.MouseButton1Click:Connect(updateToggle)
            ToggleSwitch.MouseButton1Click:Connect(updateToggle)
            
            return toggle
        end
        
        function tab:AddButton(options)
            options = options or {}
            
            local Button = Library:CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(1, -20, 0, 35),
                BackgroundColor3 = Library.Colors.Button,
                Text = options.Name or "Button",
                TextColor3 = Library.Colors.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                AutoButtonColor = false,
                LayoutOrder = #TabContent:GetChildren() * 2
            })
            Library:RoundCorners(Button, 5)
            Button.Parent = TabContent
            
            -- Hover эффект
            Button.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(
                    Button,
                    TweenInfo.new(0.2),
                    {BackgroundColor3 = Library.Colors.ButtonHover}
                ):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(
                    Button,
                    TweenInfo.new(0.2),
                    {BackgroundColor3 = Library.Colors.Button}
                ):Play()
            end)
            
            Button.MouseButton1Click:Connect(function()
                if options.Callback then
                    options.Callback()
                end
            end)
            
            return Button
        end
        
        function tab:AddSlider(options)
            options = options or {}
            local slider = {}
            slider.Value = options.Default or options.Min or 0
            
            local SliderFrame = Library:CreateElement("Frame", {
                Name = "SliderFrame",
                Size = UDim2.new(1, -20, 0, 50),
                BackgroundColor3 = Library.Colors.ElementBackground,
                LayoutOrder = #TabContent:GetChildren() * 2
            })
            Library:RoundCorners(SliderFrame, 5)
            Library:AddStroke(SliderFrame)
            SliderFrame.Parent = TabContent
            
            local SliderText = Library:CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, -20, 0, 20),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = options.Name or "Slider: " .. slider.Value,
                TextColor3 = Library.Colors.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            SliderText.Parent = SliderFrame
            
            local SliderTrack = Library:CreateElement("Frame", {
                Name = "Track",
                Size = UDim2.new(1, -20, 0, 6),
                Position = UDim2.new(0, 10, 0, 30),
                BackgroundColor3 = Library.Colors.SliderTrack
            })
            Library:RoundCorners(SliderTrack, 3)
            SliderTrack.Parent = SliderFrame
            
            local SliderFill = Library:CreateElement("Frame", {
                Name = "Fill",
                Size = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = Library.Colors.SliderFill
            })
            Library:RoundCorners(SliderFill, 3)
            SliderFill.Parent = SliderTrack
            
            local SliderThumb = Library:CreateElement("Frame", {
                Name = "Thumb",
                Size = UDim2.new(0, 12, 0, 12),
                Position = UDim2.new(0, -6, 0.5, -6),
                BackgroundColor3 = Library.Colors.Text
            })
            Library:RoundCorners(SliderThumb, 6)
            SliderThumb.Parent = SliderTrack
            
            local min = options.Min or 0
            local max = options.Max or 100
            local default = options.Default or min
            
            local function updateSlider(value)
                value = math.clamp(value, min, max)
                slider.Value = value
                
                local percentage = (value - min) / (max - min)
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderThumb.Position = UDim2.new(percentage, -6, 0.5, -6)
                SliderText.Text = options.Name and (options.Name .. ": " .. value) or ("Slider: " .. value)
                
                if options.Callback then
                    options.Callback(value)
                end
            end
            
            updateSlider(default)
            
            local dragging = false
            SliderThumb.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            SliderThumb.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = game:GetService("UserInputService"):GetMouseLocation()
                    local absolutePos = SliderTrack.AbsolutePosition
                    local absoluteSize = SliderTrack.AbsoluteSize
                    
                    local relativeX = math.clamp((mousePos.X - absolutePos.X) / absoluteSize.X, 0, 1)
                    local value = min + (max - min) * relativeX
                    
                    if options.Round then
                        value = math.floor(value / options.Round) * options.Round
                    end
                    
                    updateSlider(value)
                end
            end)
            
            SliderTrack.MouseButton1Click:Connect(function()
                local mousePos = game:GetService("UserInputService"):GetMouseLocation()
                local absolutePos = SliderTrack.AbsolutePosition
                local absoluteSize = SliderTrack.AbsoluteSize
                
                local relativeX = math.clamp((mousePos.X - absolutePos.X) / absoluteSize.X, 0, 1)
                local value = min + (max - min) * relativeX
                
                if options.Round then
                    value = math.floor(value / options.Round) * options.Round
                end
                
                updateSlider(value)
            end)
            
            return slider
        end
        
        table.insert(lib.Tabs, tab)
        
        -- Автоматически выбираем первую вкладку
        if #lib.Tabs == 1 then
            lib:SwitchTab(tab)
        end
        
        return tab
    end
    
    -- Функция переключения вкладок
    function lib:SwitchTab(tab)
        if self.CurrentTab then
            -- Найти кнопку предыдущей вкладки
            for _, button in pairs(TabContainer:GetChildren()) do
                if button:IsA("TextButton") and button.TextLabel.Text == self.CurrentTab then
                    game:GetService("TweenService"):Create(
                        button,
                        TweenInfo.new(0.2),
                        {BackgroundColor3 = Library.Colors.TabButton}
                    ):Play()
                end
            end
            
            -- Скрыть предыдущий контент
            local oldContent = ContentScrolling:FindFirstChild(self.CurrentTab .. "Content")
            if oldContent then
                oldContent.Visible = false
            end
        end
        
        -- Показать новый контент
        local newContent = ContentScrolling:FindFirstChild(tab .. "Content")
        if newContent then
            newContent.Visible = true
        end
        
        -- Подсветить кнопку вкладки
        local tabButton = TabContainer:FindFirstChild(tab .. "TabButton")
        if tabButton then
            game:GetService("TweenService"):Create(
                tabButton,
                TweenInfo.new(0.2),
                {BackgroundColor3 = Library.Colors.TabButtonSelected}
            ):Play()
        end
        
        self.CurrentTab = tab
    end
    
    -- Функции показа/скрытия
    function lib:Toggle()
        lib.Visible = not lib.Visible
        Background.Visible = lib.Visible
    end
    
    function lib:Show()
        lib.Visible = true
        Background.Visible = true
    end
    
    function lib:Hide()
        lib.Visible = false
        Background.Visible = false
    end
    
    -- Добавляем горячую клавишу
    if options.Keybind then
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode[options.Keybind] then
                lib:Toggle()
            end
        end)
    end
    
    ScreenGui.Parent = game:GetService("CoreGui")
    
    return lib
end

return Library
