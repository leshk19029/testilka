--[[
    Simple UI Library inspired by Fatality-Dark Interface
    Author: Grok (built by xAI)
    License: MIT
    Features: Draggable on all devices, Tabs on left, Elements in tabs (Toggle, Slider, Button, Dropdown)
    Dark theme with Gotham font, smooth animations via TweenService
--]]

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Constants
local LIBRARY = {}
LIBRARY.Colors = {
    Black = Color3.fromRGB(16, 16, 16),
    Dark = Color3.fromRGB(24, 24, 24),
    Main = Color3.fromRGB(255, 106, 133),
    Text = Color3.fromRGB(255, 255, 255),
    Gray = Color3.fromRGB(29, 29, 29)
}
LIBRARY.Font = Font.new("rbxasset://fonts/families/Gotham.json", Enum.FontWeight.SemiBold)

-- Helper Functions
local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 4)
    corner.Parent = parent
    return corner
end

local function createStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or LIBRARY.Colors.Gray
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

local function tween(obj, time, props, style)
    style = style or Enum.EasingStyle.Quart
    local tween = TweenService:Create(obj, TweenInfo.new(time or 0.3, style), props)
    tween:Play()
    return tween
end

local function getTextSize(text, size, font)
    return TextService:GetTextSize(text, size or 14, font or LIBRARY.Font, Vector2.new(1e9, 1e9))
end

local function addDrag(frame)
    local dragging = false
    local dragStart = nil
    local startPos = nil

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            update(input)
        end
    end)
end

-- Create Main Window
function LIBRARY:CreateWindow(config)
    config = config or {}
    local title = config.Title or "Simple UI"
    local size = config.Size or UDim2.new(0, 600, 0, 400)
    local keybind = config.Keybind or Enum.KeyCode.RightShift

    local screen = Instance.new("ScreenGui")
    screen.Name = "SimpleUI"
    screen.Parent = CoreGui
    screen.ResetOnSpawn = false
    screen.IgnoreGuiInset = true

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Parent = screen
    mainFrame.BackgroundColor3 = LIBRARY.Colors.Black
    mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    mainFrame.Size = size
    mainFrame.ClipsDescendants = true
    createCorner(mainFrame, 8)
    createStroke(mainFrame, LIBRARY.Colors.Gray, 1)
    addDrag(mainFrame)

    -- Header
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Parent = mainFrame
    header.BackgroundColor3 = LIBRARY.Colors.Dark
    header.Size = UDim2.new(1, 0, 0, 50)
    createCorner(header, 8)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Parent = header
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 15, 0.5, 0)
    titleLabel.AnchorPoint = Vector2.new(0, 0.5)
    titleLabel.Size = UDim2.new(1, 0, 1, 0)
    titleLabel.Font = LIBRARY.Font
    titleLabel.Text = title
    titleLabel.TextColor3 = LIBRARY.Colors.Text
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Tabs Container (Left Side)
    local tabsContainer = Instance.new("Frame")
    tabsContainer.Name = "Tabs"
    tabsContainer.Parent = mainFrame
    tabsContainer.BackgroundTransparency = 1
    tabsContainer.Position = UDim2.new(0, 0, 0, 50)
    tabsContainer.Size = UDim2.new(0, 150, 1, -50)

    local tabsList = Instance.new("UIListLayout")
    tabsList.Parent = tabsContainer
    tabsList.SortOrder = Enum.SortOrder.LayoutOrder
    tabsList.Padding = UDim.new(0, 5)

    local tabsPadding = Instance.new("UIPadding")
    tabsPadding.Parent = tabsContainer
    tabsPadding.PaddingTop = UDim.new(0, 5)
    tabsPadding.PaddingLeft = UDim.new(0, 5)
    tabsPadding.PaddingRight = UDim.new(0, 5)

    -- Content Container (Right Side)
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "Content"
    contentContainer.Parent = mainFrame
    contentContainer.BackgroundTransparency = 1
    contentContainer.Position = UDim2.new(0, 150, 0, 50)
    contentContainer.Size = UDim2.new(1, -150, 1, -50)

    local currentTab = nil
    local tabData = {}

    -- Toggle Window
    local visible = true
    local function toggle()
        visible = not visible
        tween(mainFrame, 0.3, {Size = visible and size or UDim2.new(0, 0, 0, 0)})
    end

    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == keybind then
            toggle()
        end
    end)

    -- Add Tab
    function tabData:AddTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name
        tabButton.Parent = tabsContainer
        tabButton.BackgroundColor3 = LIBRARY.Colors.Dark
        tabButton.Size = UDim2.new(1, 0, 0, 40)
        tabButton.Font = LIBRARY.Font
        tabButton.Text = name
        tabButton.TextColor3 = LIBRARY.Colors.Text
        tabButton.TextSize = 14
        createCorner(tabButton, 4)
        createStroke(tabButton, LIBRARY.Colors.Gray, 1)

        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name .. "Content"
        tabContent.Parent = contentContainer
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.Position = UDim2.new(0, 10, 0, 10)
        tabContent.Size = UDim2.new(1, -20, 1, -20)
        tabContent.Visible = false
        tabContent.ScrollBarThickness = 6
        tabContent.ScrollBarImageColor3 = LIBRARY.Colors.Main
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabContent.ScrollingDirection = Enum.ScrollingDirection.Y

        local listLayout = Instance.new("UIListLayout")
        listLayout.Parent = tabContent
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0, 8)

        local contentPadding = Instance.new("UIPadding")
        contentPadding.Parent = tabContent
        contentPadding.PaddingTop = UDim.new(0, 5)
        contentPadding.PaddingLeft = UDim.new(0, 5)
        contentPadding.PaddingRight = UDim.new(0, 5)
        contentPadding.PaddingBottom = UDim.new(0, 5)

        local elements = {}

        -- Select Tab
        local function select()
            if currentTab then
                currentTab.Button.BackgroundColor3 = LIBRARY.Colors.Dark
                currentTab.Content.Visible = false
            end
            currentTab = {Button = tabButton, Content = tabContent}
            tabButton.BackgroundColor3 = LIBRARY.Colors.Main
            tabContent.Visible = true
        end

        tabButton.MouseButton1Click:Connect(select)

        if #tabData == 0 then select() end
        table.insert(tabData, {Button = tabButton, Content = tabContent})

        -- Add Toggle
        function elements:AddToggle(config)
            config = config or {}
            local name = config.Name or "Toggle"
            local default = config.Default or false
            local callback = config.Callback or function() end

            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = name
            toggleFrame.Parent = tabContent
            toggleFrame.BackgroundColor3 = LIBRARY.Colors.Dark
            toggleFrame.Size = UDim2.new(1, 0, 0, 30)
            createCorner(toggleFrame, 4)
            createStroke(toggleFrame, LIBRARY.Colors.Gray, 1)

            local label = Instance.new("TextLabel")
            label.Parent = toggleFrame
            label.BackgroundTransparency = 1
            label.Position = UDim2.new(0, 10, 0.5, 0)
            label.AnchorPoint = Vector2.new(0, 0.5)
            label.Size = UDim2.new(1, -50, 0.8, 0)
            label.Font = LIBRARY.Font
            label.Text = name
            label.TextColor3 = LIBRARY.Colors.Text
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left

            local switch = Instance.new("TextButton")
            switch.Parent = toggleFrame
            switch.BackgroundColor3 = default and LIBRARY.Colors.Main or LIBRARY.Colors.Gray
            switch.Position = UDim2.new(1, -30, 0.5, 0)
            switch.AnchorPoint = Vector2.new(1, 0.5)
            switch.Size = UDim2.new(0, 20, 0, 12)
            switch.Font = LIBRARY.Font
            switch.Text = ""
            createCorner(switch, 6)

            switch.MouseButton1Click:Connect(function()
                default = not default
                tween(switch, 0.2, {BackgroundColor3 = default and LIBRARY.Colors.Main or LIBRARY.Colors.Gray})
                callback(default)
            end)

            return {
                Set = function(value)
                    default = value
                    tween(switch, 0.2, {BackgroundColor3 = default and LIBRARY.Colors.Main or LIBRARY.Colors.Gray})
                    callback(default)
                end
            }
        end

        -- Add Slider
        function elements:AddSlider(config)
            config = config or {}
            local name = config.Name or "Slider"
            local min = config.Min or 0
            local max = config.Max or 100
            local default = config.Default or math.floor((max - min) / 2)
            local callback = config.Callback or function() end

            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = name
            sliderFrame.Parent = tabContent
            sliderFrame.BackgroundColor3 = LIBRARY.Colors.Dark
            sliderFrame.Size = UDim2.new(1, 0, 0, 50)
            createCorner(sliderFrame, 4)
            createStroke(sliderFrame, LIBRARY.Colors.Gray, 1)

            local label = Instance.new("TextLabel")
            label.Parent = sliderFrame
            label.BackgroundTransparency = 1
            label.Position = UDim2.new(0, 10, 0, 5)
            label.Size = UDim2.new(1, -50, 0, 20)
            label.Font = LIBRARY.Font
            label.Text = name
            label.TextColor3 = LIBRARY.Colors.Text
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left

            local valueLabel = Instance.new("TextLabel")
            valueLabel.Parent = sliderFrame
            valueLabel.BackgroundTransparency = 1
            valueLabel.Position = UDim2.new(1, -40, 0, 5)
            valueLabel.Size = UDim2.new(0, 30, 0, 20)
            valueLabel.Font = LIBRARY.Font
            valueLabel.Text = tostring(default)
            valueLabel.TextColor3 = LIBRARY.Colors.Text
            valueLabel.TextSize = 12
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right

            local bar = Instance.new("Frame")
            bar.Parent = sliderFrame
            bar.BackgroundColor3 = LIBRARY.Colors.Gray
            bar.Position = UDim2.new(0, 10, 0, 30)
            bar.Size = UDim2.new(1, -20, 0, 6)
            createCorner(bar, 3)

            local fill = Instance.new("Frame")
            fill.Parent = bar
            fill.BackgroundColor3 = LIBRARY.Colors.Main
            fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            createCorner(fill, 3)

            local dragging = false
            bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local percent = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
                    local value = math.floor(min + (max - min) * percent)
                    fill.Size = UDim2.new(percent, 0, 1, 0)
                    valueLabel.Text = tostring(value)
                    callback(value)
                end
            end)

            return {
                Set = function(value)
                    value = math.clamp(value, min, max)
                    local percent = (value - min) / (max - min)
                    fill.Size = UDim2.new(percent, 0, 1, 0)
                    valueLabel.Text = tostring(value)
                    callback(value)
                end
            }
        end

        -- Add Button
        function elements:AddButton(config)
            config = config or {}
            local name = config.Name or "Button"
            local callback = config.Callback or function() end

            local buttonFrame = Instance.new("TextButton")
            buttonFrame.Name = name
            buttonFrame.Parent = tabContent
            buttonFrame.BackgroundColor3 = LIBRARY.Colors.Main
            buttonFrame.Size = UDim2.new(1, 0, 0, 35)
            buttonFrame.Font = LIBRARY.Font
            buttonFrame.Text = name
            buttonFrame.TextColor3 = LIBRARY.Colors.Text
            buttonFrame.TextSize = 14
            createCorner(buttonFrame, 4)
            createStroke(buttonFrame, LIBRARY.Colors.Gray, 1)

            buttonFrame.MouseButton1Click:Connect(callback)

            buttonFrame.MouseEnter:Connect(function()
                tween(buttonFrame, 0.2, {BackgroundColor3 = Color3.fromRGB(200, 80, 110)})
            end)

            buttonFrame.MouseLeave:Connect(function()
                tween(buttonFrame, 0.2, {BackgroundColor3 = LIBRARY.Colors.Main})
            end)

            return {
                Fire = callback
            }
        end

        -- Add Dropdown (Combo)
        function elements:AddDropdown(config)
            config = config or {}
            local name = config.Name or "Dropdown"
            local options = config.Options or {"Option 1", "Option 2"}
            local default = config.Default or options[1]
            local multi = config.Multi or false
            local callback = config.Callback or function() end

            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Name = name
            dropdownFrame.Parent = tabContent
            dropdownFrame.BackgroundColor3 = LIBRARY.Colors.Dark
            dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
            createCorner(dropdownFrame, 4)
            createStroke(dropdownFrame, LIBRARY.Colors.Gray, 1)

            local label = Instance.new("TextLabel")
            label.Parent = dropdownFrame
            label.BackgroundTransparency = 1
            label.Position = UDim2.new(0, 10, 0.5, 0)
            label.AnchorPoint = Vector2.new(0, 0.5)
            label.Size = UDim2.new(1, -120, 0.8, 0)
            label.Font = LIBRARY.Font
            label.Text = name
            label.TextColor3 = LIBRARY.Colors.Text
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left

            local display = Instance.new("TextButton")
            display.Parent = dropdownFrame
            display.BackgroundColor3 = LIBRARY.Colors.Gray
            display.Position = UDim2.new(1, -110, 0.5, 0)
            display.AnchorPoint = Vector2.new(1, 0.5)
            display.Size = UDim2.new(0, 100, 0, 20)
            display.Font = LIBRARY.Font
            display.Text = default
            display.TextColor3 = LIBRARY.Colors.Text
            display.TextSize = 12
            createCorner(display, 4)

            local dropdownList = Instance.new("Frame")
            dropdownList.Parent = dropdownFrame
            dropdownList.BackgroundColor3 = LIBRARY.Colors.Dark
            dropdownList.Position = UDim2.new(1, -110, 1, 2)
            dropdownList.AnchorPoint = Vector2.new(1, 0)
            dropdownList.Size = UDim2.new(0, 100, 0, 0)
            dropdownList.Visible = false
            createCorner(dropdownList, 4)
            createStroke(dropdownList, LIBRARY.Colors.Gray, 1)

            local listLayout = Instance.new("UIListLayout")
            listLayout.Parent = dropdownList
            listLayout.SortOrder = Enum.SortOrder.LayoutOrder
            listLayout.Padding = UDim.new(0, 2)

            for _, opt in ipairs(options) do
                local optBtn = Instance.new("TextButton")
                optBtn.Parent = dropdownList
                optBtn.BackgroundTransparency = 1
                optBtn.Size = UDim2.new(1, 0, 0, 25)
                optBtn.Font = LIBRARY.Font
                optBtn.Text = opt
                optBtn.TextColor3 = LIBRARY.Colors.Text
                optBtn.TextSize = 12
                optBtn.TextXAlignment = Enum.TextXAlignment.Left

                optBtn.MouseButton1Click:Connect(function()
                    if not multi then
                        display.Text = opt
                        callback(opt)
                        dropdownList.Visible = false
                    end
                end)
            end

            listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                dropdownList.Size = UDim2.new(0, 100, 0, math.min(listLayout.AbsoluteContentSize.Y, 100))
            end)

            display.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
            end)

            return {
                Set = function(value)
                    display.Text = value
                    callback(value)
                end,
                Refresh = function(newOptions)
                    for _, v in ipairs(dropdownList:GetChildren()) do
                        if v:IsA("TextButton") then v:Destroy() end
                    end
                    for _, opt in ipairs(newOptions) do
                        local optBtn = Instance.new("TextButton")
                        optBtn.Parent = dropdownList
                        optBtn.BackgroundTransparency = 1
                        optBtn.Size = UDim2.new(1, 0, 0, 25)
                        optBtn.Font = LIBRARY.Font
                        optBtn.Text = opt
                        optBtn.TextColor3 = LIBRARY.Colors.Text
                        optBtn.TextSize = 12
                        optBtn.TextXAlignment = Enum.TextXAlignment.Left
                        optBtn.MouseButton1Click:Connect(function()
                            if not multi then
                                display.Text = opt
                                callback(opt)
                                dropdownList.Visible = false
                            end
                        end)
                    end
                end
            }
        end

        return elements
    end

    return tabData
end

return LIBRARY
